# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import subprocess
import sys
import xlrd
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QVBoxLayout, QListWidget, QListWidgetItem, QWidget
from docx import Document
from openpyxl.reader.excel import load_workbook
from app.utils.utils import get_os


class UiMainWindow(object):
    def __init__(self):
        self.refresh_button = None
        self.file_list_widget2 = None
        self.statusbar = None
        self.menubar = None
        self.pushButton = None
        self.groupBox_2 = None
        self.central_widget = None
        self.groupBox = None
        self.file_list_widget = None
        self.folder_path = None

    def setup_ui(self, main_window):
        main_window.setObjectName("MainWindow")
        main_window.resize(800, 600)
        self.central_widget = QWidget(main_window)
        self.central_widget.setObjectName("central_widget")

        self.groupBox = QtWidgets.QGroupBox(self.central_widget)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 401, 461))
        self.groupBox.setObjectName("groupBox")

        self.groupBox_2 = QtWidgets.QGroupBox(self.central_widget)
        self.groupBox_2.setGeometry(QtCore.QRect(400, 0, 401, 461))
        self.groupBox_2.setObjectName("groupBox_2")

        layout = QVBoxLayout(self.groupBox)
        self.file_list_widget = QListWidget()
        layout.addWidget(self.file_list_widget)

        layout2 = QVBoxLayout(self.groupBox_2)
        self.file_list_widget2 = QListWidget()
        layout2.addWidget(self.file_list_widget2)

        self.pushButton = QtWidgets.QPushButton(self.central_widget)
        self.pushButton.setGeometry(QtCore.QRect(10, 490, 113, 32))
        self.pushButton.setObjectName("pushButton")

        self.refresh_button = QtWidgets.QPushButton(self.central_widget)
        self.refresh_button.setGeometry(QtCore.QRect(150, 490, 113, 32))
        self.refresh_button.clicked.connect(self.refresh_groupboxes)

        main_window.setCentralWidget(self.central_widget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        main_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)

        self.translate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

        self.pushButton.clicked.connect(self.open_folder)
        self.file_list_widget.itemClicked.connect(self.open_file)
        self.file_list_widget2.itemClicked.connect(self.open_file)

    def translate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "文件审核过滤小工具"))
        self.groupBox.setTitle(_translate("MainWindow", "全部文件"))
        self.groupBox_2.setTitle(_translate("MainWindow", "未审核文件"))
        self.pushButton.setText(_translate("MainWindow", "选择文件夹"))
        self.refresh_button.setText(_translate("MainWindow", "刷新"))

    def open_folder(self):
        self.folder_path = QFileDialog.getExistingDirectory(None, "选择文件夹")
        self.refresh_groupboxes()

    def open_file(self, item):
        file_path = item.data(QtCore.Qt.UserRole)
        if file_path and os.path.isfile(file_path):
            os_type = get_os()
            if os_type == 'Windows':
                os.startfile(file_path)  # 在Windows系统中打开文件，适用于Word、Excel和PDF文件
            elif os_type == 'MacOS':
                subprocess.run(['open', file_path])  # 在macOS系统中打开文件，适用于Word、Excel和PDF文件
            else:
                Exception("暂不支持此系统，请联系作者")

    def check_file_content(self, file_path, target_string):
        file_type = os.path.splitext(file_path)[1]
        if file_type in ['.doc', '.docx']:
            doc = Document(file_path)
            content = []
            for paragraph in doc.paragraphs:
                content.append(paragraph.text)
        elif file_type == '.xlsx':
            wb = load_workbook(file_path)
            ws = wb.active
            content = []
            for row in ws.iter_rows():
                for cell in row:
                    if cell.value is not None:
                        content.append(str(cell.value))
        elif file_type == '.xls':
            wb = xlrd.open_workbook(file_path)
            sheet = wb.sheet_by_index(0)
            content = []
            for row in range(sheet.nrows):
                for col in range(sheet.ncols):
                    cell_value = sheet.cell_value(row, col)
                    if cell_value:
                        content.append(str(cell_value))
        else:
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()

        if target_string in content:
            return True
        else:
            return False

    def refresh_groupboxes(self):
        if self.folder_path:
            file_names = [name for name in os.listdir(self.folder_path) if not name.startswith('.~')]
            self.file_list_widget.clear()
            self.file_list_widget2.clear()
            valid_extensions = ['.doc', '.docx', '.xls', '.xlsx', '.pdf', '.txt']
            try:
                for file_name in file_names:
                    _, extension = os.path.splitext(file_name)
                    if extension.lower() in valid_extensions:
                        file_path = os.path.join(self.folder_path, file_name)
                        item = QListWidgetItem(file_name)
                        item.setData(QtCore.Qt.UserRole, os.path.join(self.folder_path, file_name))
                        self.file_list_widget.addItem(item)

                        if not self.check_file_content(file_path, "主任已审核"):
                            item = QListWidgetItem(file_name)
                            item.setData(QtCore.Qt.UserRole, file_path)
                            self.file_list_widget2.addItem(item)
            except Exception as e:
                print(e)


if __name__ == '__main__':
    myApp = QApplication(sys.argv)
    myWin = QMainWindow()
    myUI = UiMainWindow()

    myUI.setup_ui(myWin)
    myWin.show()
    sys.exit(myApp.exec_())
