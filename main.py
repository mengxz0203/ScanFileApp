# -*- coding: utf-8 -*-
import os
import subprocess
import sys

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QVBoxLayout, QListWidget, QListWidgetItem, QWidget

from app.utils.utils import get_os


class UiMainWindow(object):
    def __init__(self):
        self.file_list_widget2 = None
        self.statusbar = None
        self.menubar = None
        self.pushButton = None
        self.groupBox_2 = None
        self.central_widget = None
        self.groupBox = None
        self.file_list_widget = None

    def setup_ui(self, main_window):
        main_window.setObjectName("MainWindow")
        main_window.resize(800, 600)
        self.central_widget = QWidget(main_window)
        self.central_widget.setObjectName("central_widget")

        self.groupBox = QtWidgets.QGroupBox(self.central_widget)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 401, 461))
        self.groupBox.setObjectName("groupBox")

        self.groupBox_2 = QtWidgets.QGroupBox(self.central_widget)
        self.groupBox_2.setGeometry(QtCore.QRect(400, 0, 401, 461))
        self.groupBox_2.setObjectName("groupBox_2")

        layout = QVBoxLayout(self.groupBox)
        self.file_list_widget = QListWidget()
        layout.addWidget(self.file_list_widget)

        layout2 = QVBoxLayout(self.groupBox_2)
        self.file_list_widget2 = QListWidget()
        layout2.addWidget(self.file_list_widget2)

        self.pushButton = QtWidgets.QPushButton(self.central_widget)
        self.pushButton.setGeometry(QtCore.QRect(10, 490, 113, 32))
        self.pushButton.setObjectName("pushButton")

        main_window.setCentralWidget(self.central_widget)
        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        main_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")
        main_window.setStatusBar(self.statusbar)

        self.translate_ui(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

        self.pushButton.clicked.connect(self.open_folder)
        self.file_list_widget.itemClicked.connect(self.open_file)
        self.file_list_widget2.itemClicked.connect(self.open_file)

    def translate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "全部文件"))
        self.groupBox_2.setTitle(_translate("MainWindow", "未审核文件"))
        self.pushButton.setText(_translate("MainWindow", "选择文件夹"))

    def open_folder(self):
        folder_path = QFileDialog.getExistingDirectory(None, "选择文件夹")
        if folder_path:
            file_names = os.listdir(folder_path)
            self.file_list_widget.clear()
            self.file_list_widget2.clear()
            valid_extensions = ['.doc', '.docx', '.xls', '.xlsx', '.pdf', '.txt']
            for file_name in file_names:
                _, extension = os.path.splitext(file_name)
                if extension.lower() in valid_extensions:
                    file_path = os.path.join(folder_path, file_name)
                    item = QListWidgetItem(file_name)
                    item.setData(QtCore.Qt.UserRole, os.path.join(folder_path, file_name))
                    self.file_list_widget.addItem(item)

                    if not self.check_file_content(file_path, "主任已审核"):
                        item = QListWidgetItem(file_name)
                        item.setData(QtCore.Qt.UserRole, file_path)
                        self.file_list_widget2.addItem(item)

    def open_file(self, item):
        file_path = item.data(QtCore.Qt.UserRole)
        if file_path and os.path.isfile(file_path):
            os_type = get_os()
            print(os_type)
            if os_type == 'Windows':
                os.startfile(file_path)  # 在Windows系统中打开文件，适用于Word、Excel和PDF文件
            elif os_type == 'MacOS':
                subprocess.run(['open', file_path])  # 在macOS系统中打开文件，适用于Word、Excel和PDF文件
            else:
                Exception("暂不支持此系统，请联系作者")

    def check_file_content(self, file_path, target_string):
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            if target_string in content:
                return True
            else:
                return False


if __name__ == '__main__':
    myApp = QApplication(sys.argv)
    myWin = QMainWindow()
    myUI = UiMainWindow()

    myUI.setup_ui(myWin)
    myWin.show()
    sys.exit(myApp.exec_())
